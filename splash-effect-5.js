"use strict";const canvas=document.querySelector(".splash-canvas"),homePageBody=document.querySelector("body"),mainWrapper=document.querySelector("#main"),modeChangeButton=document.querySelector(".theme-button");resizeCanvas();let config={SIM_RESOLUTION:128,DYE_RESOLUTION:1024,CAPTURE_RESOLUTION:512,DENSITY_DISSIPATION:4,VELOCITY_DISSIPATION:2.87,PRESSURE:.43,PRESSURE_ITERATIONS:20,CURL:0,SPLAT_RADIUS:.1,SPLAT_FORCE:5000,SHADING:!0,COLORFUL:!0,COLOR_UPDATE_SPEED:10,PAUSED:!1,BACK_COLOR:{r:0d,g:0d,b:0d},TRANSPARENT:!1,BLOOM:!0,BLOOM_ITERATIONS:8,BLOOM_RESOLUTION:256,BLOOM_INTENSITY:.1,BLOOM_THRESHOLD:.6,BLOOM_SOFT_KNEE:.7,SUNRAYS:!0,SUNRAYS_RESOLUTION:196,SUNRAYS_WEIGHT:.7};function pointerPrototype(){this.id=-1,this.texcoordX=0,this.texcoordY=0,this.prevTexcoordX=0,this.prevTexcoordY=0,this.deltaX=0,this.deltaY=0,this.down=!1,this.moved=!1,this.color=[30,0,300]}let pointers=[],splatStack=[];pointers.push(new pointerPrototype);const{gl:gl,ext:ext}=getWebGLContext(canvas);function getWebGLContext(r){let t={alpha:!0,depth:!1,stencil:!1,antialias:!1,preserveDrawingBuffer:!1},n=r.getContext("webgl2",t),i=!!n,o,a;i||(n=r.getContext("webgl",t)||r.getContext("experimental-webgl",t)),i?(n.getExtension("EXT_color_buffer_float"),a=n.getExtension("OES_texture_float_linear")):(o=n.getExtension("OES_texture_half_float"),a=n.getExtension("OES_texture_half_float_linear")),n.clearColor(1,1,1,1);let l=i?n.HALF_FLOAT:o.HALF_FLOAT_OES,u,c,g;return i?(u=getSupportedFormat(n,n.RGBA16F,n.RGBA,l),c=getSupportedFormat(n,n.RG16F,n.RG,l),g=getSupportedFormat(n,n.R16F,n.RED,l)):(u=getSupportedFormat(n,n.RGBA,n.RGBA,l),c=getSupportedFormat(n,n.RGBA,n.RGBA,l),g=getSupportedFormat(n,n.RGBA,n.RGBA,l)),{gl:n,ext:{formatRGBA:u,formatRG:c,formatR:g,halfFloatTexType:l,supportLinearFiltering:a}}}function getSupportedFormat(r,t,n,i){if(!supportRenderTextureFormat(r,t,n,i))switch(t){case r.R16F:return getSupportedFormat(r,r.RG16F,r.RG,i);case r.RG16F:return getSupportedFormat(r,r.RGBA16F,r.RGBA,i);default:return null}return{internalFormat:t,format:n}}function supportRenderTextureFormat(r,t,n,i){let o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texImage2D(r.TEXTURE_2D,0,t,4,4,0,n,i,null);let a=r.createFramebuffer();return r.bindFramebuffer(r.FRAMEBUFFER,a),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0),r.checkFramebufferStatus(r.FRAMEBUFFER)==r.FRAMEBUFFER_COMPLETE}function isMobile(){return/Mobi|Android/i.test(navigator.userAgent)}function captureScreenshot(){let r=getResolution(config.CAPTURE_RESOLUTION),t=createFBO(r.width,r.height,ext.formatRGBA.internalFormat,ext.formatRGBA.format,ext.halfFloatTexType,gl.NEAREST);render(t);let n=framebufferToTexture(t);n=normalizeTexture(n,t.width,t.height);let i=textureToCanvas(n,t.width,t.height).toDataURL();downloadURI("fluid.png",i),URL.revokeObjectURL(i)}function framebufferToTexture(r){gl.bindFramebuffer(gl.FRAMEBUFFER,r.fbo);let t=r.width*r.height*4,n=new Float32Array(t);return gl.readPixels(0,0,r.width,r.height,gl.RGBA,gl.FLOAT,n),n}function normalizeTexture(r,t,n){let i=new Uint8Array(r.length),o=0;for(let a=n-1;a>=0;a--)for(let l=0;l<t;l++){let u=a*t*4+4*l;i[u+0]=255*clamp01(r[o+0]),i[u+1]=255*clamp01(r[o+1]),i[u+2]=255*clamp01(r[o+2]),i[u+3]=255*clamp01(r[o+3]),o+=4}return i}function clamp01(r){return Math.min(Math.max(r,0),1)}function textureToCanvas(r,t,n){let i=document.createElement("canvas"),o=i.getContext("2d");i.width=t,i.height=n;let a=o.createImageData(t,n);return a.data.set(r),o.putImageData(a,0,0),i}function downloadURI(r,t){let n=document.createElement("a");n.download=r,n.href=t,document.body.appendChild(n),n.click(),document.body.removeChild(n)}isMobile()&&(config.DYE_RESOLUTION=512),ext.supportLinearFiltering||(config.DYE_RESOLUTION=512,config.SHADING=!1,config.BLOOM=!1,config.SUNRAYS=!1);class Material{constructor(r,t){this.vertexShader=r,this.fragmentShaderSource=t,this.programs=[],this.activeProgram=null,this.uniforms=[]}setKeywords(r){let t=0;for(let n=0;n<r.length;n++)t+=hashCode(r[n]);let i=this.programs[t];if(null==i){let o=compileShader(gl.FRAGMENT_SHADER,this.fragmentShaderSource,r);i=createProgram(this.vertexShader,o),this.programs[t]=i}i!=this.activeProgram&&(this.uniforms=getUniforms(i),this.activeProgram=i)}bind(){gl.useProgram(this.activeProgram)}}class Program{constructor(r,t){this.uniforms={},this.program=createProgram(r,t),this.uniforms=getUniforms(this.program)}bind(){gl.useProgram(this.program)}}function createProgram(r,t){let n=gl.createProgram();return gl.attachShader(n,r),gl.attachShader(n,t),gl.linkProgram(n),gl.getProgramParameter(n,gl.LINK_STATUS)||console.trace(gl.getProgramInfoLog(n)),n}function getUniforms(r){let t=[],n=gl.getProgramParameter(r,gl.ACTIVE_UNIFORMS);for(let i=0;i<n;i++){let o=gl.getActiveUniform(r,i).name;t[o]=gl.getUniformLocation(r,o)}return t}function compileShader(r,t,n){t=addKeywords(t,n);let i=gl.createShader(r);return gl.shaderSource(i,t),gl.compileShader(i),gl.getShaderParameter(i,gl.COMPILE_STATUS)||console.trace(gl.getShaderInfoLog(i)),i}function addKeywords(r,t){if(null==t)return r;let n="";return t.forEach(r=>{n+="#define "+r+"\n"}),n+r}const baseVertexShader=compileShader(gl.VERTEX_SHADER,"\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n"),blurVertexShader=compileShader(gl.VERTEX_SHADER,"\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        float offset = 1.33333333;\n        vL = vUv - texelSize * offset;\n        vR = vUv + texelSize * offset;\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n"),blurShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\n        sum += texture2D(uTexture, vL) * 0.35294117;\n        sum += texture2D(uTexture, vR) * 0.35294117;\n        gl_FragColor = sum;\n    }\n"),copyShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        gl_FragColor = texture2D(uTexture, vUv);\n    }\n"),clearShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n"),colorShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n\n    uniform vec4 color;\n\n    void main () {\n        gl_FragColor = color;\n    }\n"),checkerboardShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float aspectRatio;\n\n    #define SCALE 25.0\n\n    void main () {\n        vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\n        float v = mod(uv.x + uv.y, 2.0);\n        v = v * 0.1 + 0.8;\n        gl_FragColor = vec4(vec3(v), 1.0);\n    }\n"),displayShaderSource="\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uSunrays;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n\n    vec3 linearToGamma (vec3 color) {\n        color = max(color, vec3(0));\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\n    }\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n\n    #ifdef SHADING\n        vec3 lc = texture2D(uTexture, vL).rgb;\n        vec3 rc = texture2D(uTexture, vR).rgb;\n        vec3 tc = texture2D(uTexture, vT).rgb;\n        vec3 bc = texture2D(uTexture, vB).rgb;\n\n        float dx = length(rc) - length(lc);\n        float dy = length(tc) - length(bc);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        c *= diffuse;\n    #endif\n\n    #ifdef BLOOM\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n    #endif\n\n    #ifdef SUNRAYS\n        float sunrays = texture2D(uSunrays, vUv).r;\n        c *= sunrays;\n    #ifdef BLOOM\n        bloom *= sunrays;\n    #endif\n    #endif\n\n    #ifdef BLOOM\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\n        noise = noise * 2.0 - 1.0;\n        bloom += noise / 255.0;\n        bloom = linearToGamma(bloom);\n        c += bloom;\n    #endif\n\n        float a = max(c.r, max(c.g, c.b));\n        gl_FragColor = vec4(c, a);\n    }\n",bloomPrefilterShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform vec3 curve;\n    uniform float threshold;\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n        float br = max(c.r, max(c.g, c.b));\n        float rq = clamp(br - curve.x, 0.0, curve.y);\n        rq = curve.z * rq * rq;\n        c *= max(rq, br - threshold) / max(br, 0.0001);\n        gl_FragColor = vec4(c, 0.0);\n    }\n"),bloomBlurShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum;\n    }\n"),bloomFinalShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform float intensity;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum * intensity;\n    }\n"),sunraysMaskShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 c = texture2D(uTexture, vUv);\n        float br = max(c.r, max(c.g, c.b));\n        c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\n        gl_FragColor = c;\n    }\n"),sunraysShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float weight;\n\n    #define ITERATIONS 16\n\n    void main () {\n        float Density = 0.3;\n        float Decay = 0.95;\n        float Exposure = 0.7;\n\n        vec2 coord = vUv;\n        vec2 dir = vUv - 0.5;\n\n        dir *= 1.0 / float(ITERATIONS) * Density;\n        float illuminationDecay = 1.0;\n\n        float color = texture2D(uTexture, vUv).a;\n\n        for (int i = 0; i < ITERATIONS; i++)\n        {\n            coord -= dir;\n            float col = texture2D(uTexture, coord).a;\n            color += col * illuminationDecay * weight;\n            illuminationDecay *= Decay;\n        }\n\n        gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\n    }\n"),splatShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n"),advectionShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform vec2 dyeTexelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n        vec2 st = uv / tsize - 0.5;\n\n        vec2 iuv = floor(st);\n        vec2 fuv = fract(st);\n\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n    }\n\n    void main () {\n    #ifdef MANUAL_FILTERING\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n        vec4 result = bilerp(uSource, coord, dyeTexelSize);\n    #else\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        vec4 result = texture2D(uSource, coord);\n    #endif\n        float decay = 1.0 + dissipation * dt;\n        gl_FragColor = result / decay;\n    }",ext.supportLinearFiltering?null:["MANUAL_FILTERING"]),divergenceShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).x;\n        float R = texture2D(uVelocity, vR).x;\n        float T = texture2D(uVelocity, vT).y;\n        float B = texture2D(uVelocity, vB).y;\n\n        vec2 C = texture2D(uVelocity, vUv).xy;\n        if (vL.x < 0.0) { L = -C.x; }\n        if (vR.x > 1.0) { R = -C.x; }\n        if (vT.y > 1.0) { T = -C.y; }\n        if (vB.y < 0.0) { B = -C.y; }\n\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n"),curlShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n    }\n"),vorticityShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float L = texture2D(uCurl, vL).x;\n        float R = texture2D(uCurl, vR).x;\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n        force /= length(force) + 0.0001;\n        force *= curl * C;\n        force.y *= -1.0;\n\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity += force * dt;\n        velocity = min(max(velocity, -1000.0), 1000.0);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n"),pressureShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n"),gradientSubtractShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n"),blit=(gl.bindBuffer(gl.ARRAY_BUFFER,gl.createBuffer()),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),gl.STATIC_DRAW),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,gl.createBuffer()),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),gl.STATIC_DRAW),gl.vertexAttribPointer(0,2,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),(r,t=!1)=>{null==r?(gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight),gl.bindFramebuffer(gl.FRAMEBUFFER,null)):(gl.viewport(0,0,r.width,r.height),gl.bindFramebuffer(gl.FRAMEBUFFER,r.fbo)),t&&(gl.clearColor(1,1,1,1),gl.clear(gl.COLOR_BUFFER_BIT)),gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0)});function CHECK_FRAMEBUFFER_STATUS(){let r=gl.checkFramebufferStatus(gl.FRAMEBUFFER);r!=gl.FRAMEBUFFER_COMPLETE&&console.trace("Framebuffer error: "+r)}let dye,velocity,divergence,curl,pressure,bloom,sunrays,sunraysTemp,bloomFramebuffers=[],ditheringTexture=createTextureAsync("https://cdn.jsdelivr.net/gh/heybolders/bolders/LDR_LLL1_0.png");const blurProgram=new Program(blurVertexShader,blurShader),copyProgram=new Program(baseVertexShader,copyShader),clearProgram=new Program(baseVertexShader,clearShader),colorProgram=new Program(baseVertexShader,colorShader),checkerboardProgram=new Program(baseVertexShader,checkerboardShader),bloomPrefilterProgram=new Program(baseVertexShader,bloomPrefilterShader),bloomBlurProgram=new Program(baseVertexShader,bloomBlurShader),bloomFinalProgram=new Program(baseVertexShader,bloomFinalShader),sunraysMaskProgram=new Program(baseVertexShader,sunraysMaskShader),sunraysProgram=new Program(baseVertexShader,sunraysShader),splatProgram=new Program(baseVertexShader,splatShader),advectionProgram=new Program(baseVertexShader,advectionShader),divergenceProgram=new Program(baseVertexShader,divergenceShader),curlProgram=new Program(baseVertexShader,curlShader),vorticityProgram=new Program(baseVertexShader,vorticityShader),pressureProgram=new Program(baseVertexShader,pressureShader),gradienSubtractProgram=new Program(baseVertexShader,gradientSubtractShader),displayMaterial=new Material(baseVertexShader,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uSunrays;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n\n    vec3 linearToGamma (vec3 color) {\n        color = max(color, vec3(0));\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\n    }\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n\n    #ifdef SHADING\n        vec3 lc = texture2D(uTexture, vL).rgb;\n        vec3 rc = texture2D(uTexture, vR).rgb;\n        vec3 tc = texture2D(uTexture, vT).rgb;\n        vec3 bc = texture2D(uTexture, vB).rgb;\n\n        float dx = length(rc) - length(lc);\n        float dy = length(tc) - length(bc);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        c *= diffuse;\n    #endif\n\n    #ifdef BLOOM\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n    #endif\n\n    #ifdef SUNRAYS\n        float sunrays = texture2D(uSunrays, vUv).r;\n        c *= sunrays;\n    #ifdef BLOOM\n        bloom *= sunrays;\n    #endif\n    #endif\n\n    #ifdef BLOOM\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\n        noise = noise * 2.0 - 1.0;\n        bloom += noise / 255.0;\n        bloom = linearToGamma(bloom);\n        c += bloom;\n    #endif\n\n        float a = max(c.r, max(c.g, c.b));\n        gl_FragColor = vec4(c, a);\n    }\n");function initFramebuffers(){let r=getResolution(config.SIM_RESOLUTION),t=getResolution(config.DYE_RESOLUTION),n=ext.halfFloatTexType,i=ext.formatRGBA,o=ext.formatRG,a=ext.formatR,l=ext.supportLinearFiltering?gl.LINEAR:gl.NEAREST;gl.disable(gl.BLEND),dye=null==dye?createDoubleFBO(t.width,t.height,i.internalFormat,i.format,n,l):resizeDoubleFBO(dye,t.width,t.height,i.internalFormat,i.format,n,l),velocity=null==velocity?createDoubleFBO(r.width,r.height,o.internalFormat,o.format,n,l):resizeDoubleFBO(velocity,r.width,r.height,o.internalFormat,o.format,n,l),divergence=createFBO(r.width,r.height,a.internalFormat,a.format,n,gl.NEAREST),curl=createFBO(r.width,r.height,a.internalFormat,a.format,n,gl.NEAREST),pressure=createDoubleFBO(r.width,r.height,a.internalFormat,a.format,n,gl.NEAREST),initBloomFramebuffers(),initSunraysFramebuffers()}function initBloomFramebuffers(){let r=getResolution(config.BLOOM_RESOLUTION),t=ext.halfFloatTexType,n=ext.formatRGBA,i=ext.supportLinearFiltering?gl.LINEAR:gl.NEAREST;bloom=createFBO(r.width,r.height,n.internalFormat,n.format,t,i),bloomFramebuffers.length=0;for(let o=0;o<config.BLOOM_ITERATIONS;o++){let a=r.width>>o+1,l=r.height>>o+1;if(a<2||l<2)break;let u=createFBO(a,l,n.internalFormat,n.format,t,i);bloomFramebuffers.push(u)}}function initSunraysFramebuffers(){let r=getResolution(config.SUNRAYS_RESOLUTION),t=ext.halfFloatTexType,n=ext.formatR,i=ext.supportLinearFiltering?gl.LINEAR:gl.NEAREST;sunrays=createFBO(r.width,r.height,n.internalFormat,n.format,t,i),sunraysTemp=createFBO(r.width,r.height,n.internalFormat,n.format,t,i)}function createFBO(r,t,n,i,o,a){gl.activeTexture(gl.TEXTURE0);let l=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,l),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,a),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,a),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.texImage2D(gl.TEXTURE_2D,0,n,r,t,0,i,o,null);let u=gl.createFramebuffer();return gl.bindFramebuffer(gl.FRAMEBUFFER,u),gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,l,0),gl.viewport(0,0,r,t),gl.clear(gl.COLOR_BUFFER_BIT),{texture:l,fbo:u,width:r,height:t,texelSizeX:1/r,texelSizeY:1/t,attach:r=>(gl.activeTexture(gl.TEXTURE0+r),gl.bindTexture(gl.TEXTURE_2D,l),r)}}function createDoubleFBO(r,t,n,i,o,a){let l=createFBO(r,t,n,i,o,a),u=createFBO(r,t,n,i,o,a);return{width:r,height:t,texelSizeX:l.texelSizeX,texelSizeY:l.texelSizeY,get read(){return l},set read(e){l=e},get write(){return u},set write(e){u=e},swap(){let r=l;l=u,u=r}}}function resizeFBO(r,t,n,i,o,a,l){let u=createFBO(t,n,i,o,a,l);return copyProgram.bind(),gl.uniform1i(copyProgram.uniforms.uTexture,r.attach(0)),blit(u),u}function resizeDoubleFBO(r,t,n,i,o,a,l){return r.width==t&&r.height==n||(r.read=resizeFBO(r.read,t,n,i,o,a,l),r.write=createFBO(t,n,i,o,a,l),r.width=t,r.height=n,r.texelSizeX=1/t,r.texelSizeY=1/n),r}function createTextureAsync(r){let t=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,t),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,1,1,0,gl.RGB,gl.UNSIGNED_BYTE,new Uint8Array([255,255,255]));let n={texture:t,width:1,height:1,attach:r=>(gl.activeTexture(gl.TEXTURE0+r),gl.bindTexture(gl.TEXTURE_2D,t),r)},i=new Image;i.crossOrigin="anonymous",i.onload=()=>{n.width=i.width,n.height=i.height,gl.bindTexture(gl.TEXTURE_2D,t),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,gl.RGB,gl.UNSIGNED_BYTE,i)},i.src=r;return n}function updateKeywords(){let r=[];config.SHADING&&r.push("SHADING"),config.BLOOM&&r.push("BLOOM"),config.SUNRAYS&&r.push("SUNRAYS"),displayMaterial.setKeywords(r)}updateKeywords(),initFramebuffers(),multipleSplats(parseInt(20*Math.random())+5);let lastUpdateTime=Date.now(),colorUpdateTimer=0;function update(){let r=calcDeltaTime();resizeCanvas()&&initFramebuffers(),updateColors(r),applyInputs(),config.PAUSED||step(r),render(null),requestAnimationFrame(update)}function calcDeltaTime(){let r=Date.now(),t=(r-lastUpdateTime)/1e3;return t=Math.min(t,.016666),lastUpdateTime=r,t}function resizeCanvas(){let r=scaleByPixelRatio(canvas.clientWidth),t=scaleByPixelRatio(canvas.clientHeight);return(canvas.width!=r||canvas.height!=t)&&(canvas.width=r,canvas.height=t,!0)}function updateColors(r){config.COLORFUL&&(colorUpdateTimer+=r*config.COLOR_UPDATE_SPEED)>=1&&(colorUpdateTimer=wrap(colorUpdateTimer,0,1),pointers.forEach(r=>{r.color=generateColor()}))}function applyInputs(){splatStack.length>0&&multipleSplats(splatStack.pop()),pointers.forEach(r=>{r.moved&&(r.moved=!1,splatPointer(r))})}function step(r){gl.disable(gl.BLEND),curlProgram.bind(),gl.uniform2f(curlProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(curlProgram.uniforms.uVelocity,velocity.read.attach(0)),blit(curl),vorticityProgram.bind(),gl.uniform2f(vorticityProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(vorticityProgram.uniforms.uVelocity,velocity.read.attach(0)),gl.uniform1i(vorticityProgram.uniforms.uCurl,curl.attach(1)),gl.uniform1f(vorticityProgram.uniforms.curl,config.CURL),gl.uniform1f(vorticityProgram.uniforms.dt,r),blit(velocity.write),velocity.swap(),divergenceProgram.bind(),gl.uniform2f(divergenceProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(divergenceProgram.uniforms.uVelocity,velocity.read.attach(0)),blit(divergence),clearProgram.bind(),gl.uniform1i(clearProgram.uniforms.uTexture,pressure.read.attach(0)),gl.uniform1f(clearProgram.uniforms.value,config.PRESSURE),blit(pressure.write),pressure.swap(),pressureProgram.bind(),gl.uniform2f(pressureProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(pressureProgram.uniforms.uDivergence,divergence.attach(0));for(let t=0;t<config.PRESSURE_ITERATIONS;t++)gl.uniform1i(pressureProgram.uniforms.uPressure,pressure.read.attach(1)),blit(pressure.write),pressure.swap();gradienSubtractProgram.bind(),gl.uniform2f(gradienSubtractProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(gradienSubtractProgram.uniforms.uPressure,pressure.read.attach(0)),gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity,velocity.read.attach(1)),blit(velocity.write),velocity.swap(),advectionProgram.bind(),gl.uniform2f(advectionProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),ext.supportLinearFiltering||gl.uniform2f(advectionProgram.uniforms.dyeTexelSize,velocity.texelSizeX,velocity.texelSizeY);let n=velocity.read.attach(0);gl.uniform1i(advectionProgram.uniforms.uVelocity,n),gl.uniform1i(advectionProgram.uniforms.uSource,n),gl.uniform1f(advectionProgram.uniforms.dt,r),gl.uniform1f(advectionProgram.uniforms.dissipation,config.VELOCITY_DISSIPATION),blit(velocity.write),velocity.swap(),ext.supportLinearFiltering||gl.uniform2f(advectionProgram.uniforms.dyeTexelSize,dye.texelSizeX,dye.texelSizeY),gl.uniform1i(advectionProgram.uniforms.uVelocity,velocity.read.attach(0)),gl.uniform1i(advectionProgram.uniforms.uSource,dye.read.attach(1)),gl.uniform1f(advectionProgram.uniforms.dissipation,config.DENSITY_DISSIPATION),blit(dye.write),dye.swap()}function render(r){config.BLOOM&&applyBloom(dye.read,bloom),config.SUNRAYS&&(applySunrays(dye.read,dye.write,sunrays),blur(sunrays,sunraysTemp,1)),null!=r&&config.TRANSPARENT?gl.disable(gl.BLEND):(gl.blendFunc(gl.ONE,gl.ONE_MINUS_SRC_ALPHA),gl.enable(gl.BLEND)),config.TRANSPARENT||drawColor(r,normalizeColor(config.BACK_COLOR)),null==r&&config.TRANSPARENT&&drawCheckerboard(r),drawDisplay(r)}function drawColor(r,t){colorProgram.bind(),gl.uniform4f(colorProgram.uniforms.color,t.r,t.g,t.b,1),blit(r)}function drawCheckerboard(r){checkerboardProgram.bind(),gl.uniform1f(checkerboardProgram.uniforms.aspectRatio,canvas.width/canvas.height),blit(r)}function drawDisplay(r){let t=null==r?gl.drawingBufferWidth:r.width,n=null==r?gl.drawingBufferHeight:r.height;if(displayMaterial.bind(),config.SHADING&&gl.uniform2f(displayMaterial.uniforms.texelSize,1/t,1/n),gl.uniform1i(displayMaterial.uniforms.uTexture,dye.read.attach(0)),config.BLOOM){gl.uniform1i(displayMaterial.uniforms.uBloom,bloom.attach(1)),gl.uniform1i(displayMaterial.uniforms.uDithering,ditheringTexture.attach(2));let i=getTextureScale(ditheringTexture,t,n);gl.uniform2f(displayMaterial.uniforms.ditherScale,i.x,i.y)}config.SUNRAYS&&gl.uniform1i(displayMaterial.uniforms.uSunrays,sunrays.attach(3)),blit(r)}function applyBloom(r,t){if(bloomFramebuffers.length<2)return;let n=t;gl.disable(gl.BLEND),bloomPrefilterProgram.bind();let i=config.BLOOM_THRESHOLD*config.BLOOM_SOFT_KNEE+1e-4,o=config.BLOOM_THRESHOLD-i;gl.uniform3f(bloomPrefilterProgram.uniforms.curve,o,2*i,.25/i),gl.uniform1f(bloomPrefilterProgram.uniforms.threshold,config.BLOOM_THRESHOLD),gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture,r.attach(0)),blit(n),bloomBlurProgram.bind();for(let a=0;a<bloomFramebuffers.length;a++){let l=bloomFramebuffers[a];gl.uniform2f(bloomBlurProgram.uniforms.texelSize,n.texelSizeX,n.texelSizeY),gl.uniform1i(bloomBlurProgram.uniforms.uTexture,n.attach(0)),blit(l),n=l}gl.blendFunc(gl.ONE,gl.ONE),gl.enable(gl.BLEND);for(let u=bloomFramebuffers.length-2;u>=0;u--){let c=bloomFramebuffers[u];gl.uniform2f(bloomBlurProgram.uniforms.texelSize,n.texelSizeX,n.texelSizeY),gl.uniform1i(bloomBlurProgram.uniforms.uTexture,n.attach(0)),gl.viewport(0,0,c.width,c.height),blit(c),n=c}gl.disable(gl.BLEND),bloomFinalProgram.bind(),gl.uniform2f(bloomFinalProgram.uniforms.texelSize,n.texelSizeX,n.texelSizeY),gl.uniform1i(bloomFinalProgram.uniforms.uTexture,n.attach(0)),gl.uniform1f(bloomFinalProgram.uniforms.intensity,config.BLOOM_INTENSITY),blit(t)}function applySunrays(r,t,n){gl.disable(gl.BLEND),sunraysMaskProgram.bind(),gl.uniform1i(sunraysMaskProgram.uniforms.uTexture,r.attach(0)),blit(t),sunraysProgram.bind(),gl.uniform1f(sunraysProgram.uniforms.weight,config.SUNRAYS_WEIGHT),gl.uniform1i(sunraysProgram.uniforms.uTexture,t.attach(0)),blit(n)}function blur(r,t,n){blurProgram.bind();for(let i=0;i<n;i++)gl.uniform2f(blurProgram.uniforms.texelSize,r.texelSizeX,0),gl.uniform1i(blurProgram.uniforms.uTexture,r.attach(0)),blit(t),gl.uniform2f(blurProgram.uniforms.texelSize,0,r.texelSizeY),gl.uniform1i(blurProgram.uniforms.uTexture,t.attach(0)),blit(r)}function splatPointer(r){let t=r.deltaX*config.SPLAT_FORCE,n=r.deltaY*config.SPLAT_FORCE;splat(r.texcoordX,r.texcoordY,t,n,r.color)}function multipleSplats(r){for(let t=0;t<r;t++){let n=generateColor();n.r*=10,n.g*=10,n.b*=10,splat(Math.random(),Math.random(),1e3*(Math.random()-.5),1e3*(Math.random()-.5),n)}}function splat(r,t,n,i,o){splatProgram.bind(),gl.uniform1i(splatProgram.uniforms.uTarget,velocity.read.attach(0)),gl.uniform1f(splatProgram.uniforms.aspectRatio,canvas.width/canvas.height),window.innerWidth<=768?gl.uniform2f(splatProgram.uniforms.point,r,Math.abs(t+window.scrollY/window.innerHeight)%1):gl.uniform2f(splatProgram.uniforms.point,r,t),gl.uniform3f(splatProgram.uniforms.color,n,i,0),gl.uniform1f(splatProgram.uniforms.radius,correctRadius(config.SPLAT_RADIUS/100)),blit(velocity.write),velocity.swap(),gl.uniform1i(splatProgram.uniforms.uTarget,dye.read.attach(0)),gl.uniform3f(splatProgram.uniforms.color,o.r,o.g,o.b),blit(dye.write),dye.swap()}function correctRadius(r){let t=canvas.width/canvas.height;return t>1&&(r*=t),r}function updatePointerDownData(r,t,n,i){r.id=t,r.down=!0,r.moved=!1,r.texcoordX=n/canvas.width,r.texcoordY=1-i/canvas.height,r.prevTexcoordX=r.texcoordX,r.prevTexcoordY=r.texcoordY,r.deltaX=0,r.deltaY=0,r.color=generateColor()}function updatePointerMoveData(r,t,n){r.prevTexcoordX=r.texcoordX,r.prevTexcoordY=r.texcoordY,r.texcoordX=t/canvas.width,r.texcoordY=1-n/canvas.height,r.deltaX=correctDeltaX(r.texcoordX-r.prevTexcoordX),r.deltaY=correctDeltaY(r.texcoordY-r.prevTexcoordY),r.moved=Math.abs(r.deltaX)>0||Math.abs(r.deltaY)>0}function updatePointerUpData(r){r.down=!1}function correctDeltaX(r){let t=canvas.width/canvas.height;return t<1&&(r*=t),r}function correctDeltaY(r){let t=canvas.width/canvas.height;return t>1&&(r/=t),r}function generateColor(){let r=HSVtoRGB(.5,.96,.08);return r={r:197/255,g:252/255,b:252/255},r.r*=.15,r.g*=.15,r.b*=.15,r}function HSVtoRGB(r,t,n){let i,o,a,l,u,c,g,m;switch(l=Math.floor(6*r),u=6*r-l,c=n*(1-t),g=n*(1-u*t),m=n*(1-(1-u)*t),l%6){case 0:i=n,o=m,a=c;break;case 1:i=g,o=n,a=c;break;case 2:i=c,o=n,a=m;break;case 3:i=c,o=g,a=n;break;case 4:i=m,o=c,a=n;break;case 5:i=n,o=c,a=g}return{r:i,g:o,b:a}}function normalizeColor(r){return{r:r.r/255,g:r.g/255,b:r.b/255}}function wrap(r,t,n){let i=n-t;return 0==i?t:(r-t)%i+t}function getResolution(r){let t=gl.drawingBufferWidth/gl.drawingBufferHeight;t<1&&(t=1/t);let n=Math.round(r),i=Math.round(r*t);return gl.drawingBufferWidth>gl.drawingBufferHeight?{width:i,height:n}:{width:n,height:i}}function getTextureScale(r,t,n){return{x:t/r.width,y:n/r.height}}function scaleByPixelRatio(r){return Math.floor(r*(window.devicePixelRatio||1))}function hashCode(r){if(0==r.length)return 0;let t=0;for(let n=0;n<r.length;n++)t=(t<<5)-t+r.charCodeAt(n),t|=0;return t}update(),homePageBody.addEventListener("mouseover",r=>{let t=scaleByPixelRatio(r.clientX),n=scaleByPixelRatio(r.clientY),i=pointers.find(r=>-1==r.id);null==i&&(i=new pointerPrototype),updatePointerDownData(i,-1,t,n)}),homePageBody.addEventListener("mousemove",r=>{let t=pointers[0];t.down&&updatePointerMoveData(t,scaleByPixelRatio(r.clientX),scaleByPixelRatio(r.clientY))}),window.addEventListener("mouseup",()=>{updatePointerUpData(pointers[0])}),homePageBody.addEventListener("touchstart",r=>{r.preventDefault();let t=r.targetTouches;for(;t.length>=pointers.length;)pointers.push(new pointerPrototype);for(let n=0;n<t.length;n++){let i=scaleByPixelRatio(t[n].pageX),o=scaleByPixelRatio(t[n].pageY);updatePointerDownData(pointers[n+1],t[n].identifier,i,o)}}),homePageBody.addEventListener("touchmove",r=>{r.preventDefault();let t=r.targetTouches;for(let n=0;n<t.length;n++){let i=pointers[n+1];i.down&&updatePointerMoveData(i,scaleByPixelRatio(t[n].pageX),scaleByPixelRatio(t[n].pageY))}},!1),window.addEventListener("touchend",r=>{let t=r.changedTouches;for(let n=0;n<t.length;n++){let i=pointers.find(r=>r.id==t[n].identifier);null!=i&&updatePointerUpData(i)}});
